// <auto-generated>
//  This code was generated by the following tool on 2022-05-17 23:00:54 GMT-04:00:
//      https://github.com/bottlenoselabs/c2cs (v0.0.0.0)
//      
//  Changes to this file may cause incorrect behavior and will be lost if the code is
//      regenerated. To extend or add functionality use a partial class in a new file.
// </auto-generated>
// ReSharper disable All

#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static Apple.CoreGraphics.Runtime;

namespace Apple
{
    public static unsafe partial class CoreGraphics
    {
        private const string LibraryName = "/System/Library/Frameworks/CoreGraphics.framework/Versions/Current/CoreGraphics";

        #region API

        // Function @ CFArray.h:339:13 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);

        // Function @ CFArray.h:279:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CFIndex CFArrayGetCount(CFArrayRef theArray);

        // Function @ CFNumber.h:29:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool CFBooleanGetValue(CFBooleanRef boolean);

        // Function @ CFDictionary.h:539:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, void* key, void** value);

        // Function @ CFString.h:340:13 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);

        // Function @ CFNumber.h:81:14 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CFNumberType CFNumberGetType(CFNumberRef number);

        // Function @ CGWindow.h:192:33 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CFArrayRef CGWindowListCreateDescriptionFromArray(CFArrayRef windowArray);

        // Function @ CFNumber.h:105:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool CFNumberGetValue(CFNumberRef number, CFNumberType theType, void* valuePtr);

        // Function @ CFString.h:222:13 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, CString cStr, CFStringEncoding encoding);

        // Function @ CFBase.h:669:6 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CFRelease(void* cf);

        // Function @ CGWindow.h:180:33 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CFArrayRef CGWindowListCreate(CGWindowListOption option, CGWindowID relativeToWindow);

        #endregion

        #region Types

        // TypeAlias @ CFBase.h:481:61 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFStringRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFStringRef data) => data.Data;
            public static implicit operator CFStringRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CFArray.h:108:59 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFArray.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFArrayRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFArrayRef data) => data.Data;
            public static implicit operator CFArrayRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CFBase.h:475:21 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFIndex
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public long Data;

            public static implicit operator long(CFIndex data) => data.Data;
            public static implicit operator CFIndex(long data) => new() { Data = data };
        }

        // TypeAlias @ CFBase.h:545:58 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFAllocatorRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFAllocatorRef data) => data.Data;
            public static implicit operator CFAllocatorRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CGWindow.h:137:30 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct CGWindowListOption
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(CGWindowListOption data) => data.Data;
            public static implicit operator CGWindowListOption(uint data) => new() { Data = data };
        }

        // TypeAlias @ CFString.h:99:16 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct CFStringEncoding
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(CFStringEncoding data) => data.Data;
            public static implicit operator CFStringEncoding(uint data) => new() { Data = data };
        }

        // TypeAlias @ _uint32_t.h:31:22 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/_types/_uint32_t.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct uint32_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(uint32_t data) => data.Data;
            public static implicit operator uint32_t(uint data) => new() { Data = data };
        }

        // TypeAlias @ CFDictionary.h:186:69 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDictionary.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFDictionaryRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFDictionaryRef data) => data.Data;
            public static implicit operator CFDictionaryRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CFNumber.h:31:26 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFNumberType
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CFIndex Data;

            public static implicit operator CFIndex(CFNumberType data) => data.Data;
            public static implicit operator CFNumberType(CFIndex data) => new() { Data = data };
        }

        // TypeAlias @ CGWindow.h:15:18 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct CGWindowID
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(CGWindowID data) => data.Data;
            public static implicit operator CGWindowID(uint data) => new() { Data = data };
        }

        // TypeAlias @ CFBase.h:479:42 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFTypeRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFTypeRef data) => data.Data;
            public static implicit operator CFTypeRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CFNumber.h:54:61 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFNumberRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFNumberRef data) => data.Data;
            public static implicit operator CFNumberRef(void* data) => new() { Data = data };
        }

        // TypeAlias @ CFNumber.h:18:62 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct CFBooleanRef
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* Data;

            public static implicit operator void*(CFBooleanRef data) => data.Data;
            public static implicit operator CFBooleanRef(void* data) => new() { Data = data };
        }

        // Enum @ queue.h:812:1 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/dispatch/queue.h)
        public enum dispatch_autorelease_frequency_t : long
        {
            DISPATCH_AUTORELEASE_FREQUENCY_INHERIT = 0L,
            DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM = 1L,
            DISPATCH_AUTORELEASE_FREQUENCY_NEVER = 2L
        }

        // Enum @ acl.h:115:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/acl.h)
        public enum acl_entry_id_t : int
        {
            ACL_FIRST_ENTRY = 0,
            ACL_NEXT_ENTRY = -1,
            ACL_LAST_ENTRY = -2
        }

        // Enum @ acl.h:122:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/acl.h)
        public enum acl_flag_t : int
        {
            ACL_FLAG_DEFER_INHERIT = 1,
            ACL_FLAG_NO_INHERIT = 131072,
            ACL_ENTRY_INHERITED = 16,
            ACL_ENTRY_FILE_INHERIT = 32,
            ACL_ENTRY_DIRECTORY_INHERIT = 64,
            ACL_ENTRY_LIMIT_INHERIT = 128,
            ACL_ENTRY_ONLY_INHERIT = 256
        }

        // Enum @ task_policy.h:137:6 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/task_policy.h)
        public enum task_latency_qos : int
        {
            LATENCY_QOS_TIER_UNSPECIFIED = 0,
            LATENCY_QOS_TIER_0 = 16711681,
            LATENCY_QOS_TIER_1 = 16711682,
            LATENCY_QOS_TIER_2 = 16711683,
            LATENCY_QOS_TIER_3 = 16711684,
            LATENCY_QOS_TIER_4 = 16711685,
            LATENCY_QOS_TIER_5 = 16711686
        }

        // Enum @ fcntl.h:545:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/fcntl.h)
        public enum filesec_property_t : int
        {
            FILESEC_OWNER = 1,
            FILESEC_GROUP = 2,
            FILESEC_UUID = 3,
            FILESEC_MODE = 4,
            FILESEC_ACL = 5,
            FILESEC_GRPUUID = 6,
            FILESEC_ACL_RAW = 100,
            FILESEC_ACL_ALLOCSIZE = 101
        }

        // Enum @ time.h:153:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/time.h)
        public enum clockid_t : int
        {
            _CLOCK_REALTIME = 0,
            _CLOCK_MONOTONIC = 6,
            _CLOCK_MONOTONIC_RAW = 4,
            _CLOCK_MONOTONIC_RAW_APPROX = 5,
            _CLOCK_UPTIME_RAW = 8,
            _CLOCK_UPTIME_RAW_APPROX = 9,
            _CLOCK_PROCESS_CPUTIME_ID = 12,
            _CLOCK_THREAD_CPUTIME_ID = 16
        }

        // Enum @ port.h:394:6 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/port.h)
        public enum mach_port_guard_exception_codes : int
        {
            kGUARD_EXC_DESTROY = 1,
            kGUARD_EXC_MOD_REFS = 2,
            kGUARD_EXC_SET_CONTEXT = 4,
            kGUARD_EXC_UNGUARDED = 8,
            kGUARD_EXC_INCORRECT_GUARD = 16,
            kGUARD_EXC_IMMOVABLE = 32,
            kGUARD_EXC_STRICT_REPLY = 64,
            kGUARD_EXC_MSG_FILTERED = 128,
            kGUARD_EXC_INVALID_RIGHT = 256,
            kGUARD_EXC_INVALID_NAME = 512,
            kGUARD_EXC_INVALID_VALUE = 1024,
            kGUARD_EXC_INVALID_ARGUMENT = 2048,
            kGUARD_EXC_RIGHT_EXISTS = 4096,
            kGUARD_EXC_KERN_NO_SPACE = 8192,
            kGUARD_EXC_KERN_FAILURE = 16384,
            kGUARD_EXC_KERN_RESOURCE = 32768,
            kGUARD_EXC_SEND_INVALID_REPLY = 65536,
            kGUARD_EXC_SEND_INVALID_VOUCHER = 131072,
            kGUARD_EXC_SEND_INVALID_RIGHT = 262144,
            kGUARD_EXC_RCV_INVALID_NAME = 524288,
            kGUARD_EXC_RCV_GUARDED_DESC = 1048576,
            kGUARD_EXC_MOD_REFS_NON_FATAL = 2097152,
            kGUARD_EXC_IMMOVABLE_NON_FATAL = 4194304
        }

        // Enum @ IOHIDTypes.h:66:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/IOKit.framework/Headers/hidsystem/IOHIDTypes.h)
        public enum NXMouseButton : int
        {
            NX_OneButton = 0,
            NX_LeftButton = 1,
            NX_RightButton = 2
        }

        // Enum @ task_policy.h:147:6 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/task_policy.h)
        public enum task_throughput_qos : int
        {
            THROUGHPUT_QOS_TIER_UNSPECIFIED = 0,
            THROUGHPUT_QOS_TIER_0 = 16646145,
            THROUGHPUT_QOS_TIER_1 = 16646146,
            THROUGHPUT_QOS_TIER_2 = 16646147,
            THROUGHPUT_QOS_TIER_3 = 16646148,
            THROUGHPUT_QOS_TIER_4 = 16646149,
            THROUGHPUT_QOS_TIER_5 = 16646150
        }

        // Enum @ clock.h:14:1 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/os/clock.h)
        public enum os_clockid_t : int
        {
            OS_CLOCK_MACH_ABSOLUTE_TIME = 32
        }

        // Enum @ IOHIDTypes.h:148:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/IOKit.framework/Headers/hidsystem/IOHIDTypes.h)
        public enum EvCmd : int
        {
            EVNOP = 0,
            EVHIDE = 1,
            EVSHOW = 2,
            EVMOVE = 3,
            EVLEVEL = 4
        }

        // Enum @ acl.h:98:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/acl.h)
        public enum acl_type_t : int
        {
            ACL_TYPE_EXTENDED = 256,
            ACL_TYPE_ACCESS = 0,
            ACL_TYPE_DEFAULT = 1,
            ACL_TYPE_AFS = 2,
            ACL_TYPE_CODA = 3,
            ACL_TYPE_NTFS = 4,
            ACL_TYPE_NWFS = 5
        }

        // Enum @ task_inspect.h:42:6 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/task_inspect.h)
        public enum task_inspect_flavor : int
        {
            TASK_INSPECT_BASIC_COUNTS = 1
        }

        // Enum @ task_policy.h:113:14 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/task_policy.h)
        public enum task_role : int
        {
            TASK_RENICED = -1,
            TASK_UNSPECIFIED = 0,
            TASK_FOREGROUND_APPLICATION = 1,
            TASK_BACKGROUND_APPLICATION = 2,
            TASK_CONTROL_APPLICATION = 3,
            TASK_GRAPHICS_SERVER = 4,
            TASK_THROTTLE_APPLICATION = 5,
            TASK_NONUI_APPLICATION = 6,
            TASK_DEFAULT_APPLICATION = 7,
            TASK_DARWINBG_APPLICATION = 8
        }

        // Enum @ vm_statistics.h:327:6 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/mach/vm_statistics.h)
        public enum virtual_memory_guard_exception_codes : int
        {
            kGUARD_EXC_DEALLOC_GAP = 1
        }

        // Enum @ wait.h:79:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/wait.h)
        public enum idtype_t : int
        {
            P_ALL = 0,
            P_PID = 1,
            P_PGID = 2
        }

        // Enum @ ptrauth.h:27:9 (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include/ptrauth.h)
        public enum ptrauth_key : int
        {
            ptrauth_key_asia = 0,
            ptrauth_key_asib = 1,
            ptrauth_key_asda = 2,
            ptrauth_key_asdb = 3,
            ptrauth_key_process_independent_code = 0,
            ptrauth_key_process_dependent_code = 1,
            ptrauth_key_process_independent_data = 2,
            ptrauth_key_process_dependent_data = 3,
            ptrauth_key_function_pointer = 0,
            ptrauth_key_return_address = 1,
            ptrauth_key_frame_pointer = 3,
            ptrauth_key_block_function = 0,
            ptrauth_key_cxx_vtable_pointer = 2,
            ptrauth_key_method_list_pointer = 2,
            ptrauth_key_objc_isa_pointer = 2,
            ptrauth_key_objc_super_pointer = 2,
            ptrauth_key_block_descriptor_pointer = 2
        }

        // Enum @ block.h:103:1 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/dispatch/block.h)
        public enum dispatch_block_flags_t : long
        {
            DISPATCH_BLOCK_BARRIER = 1L,
            DISPATCH_BLOCK_DETACHED = 2L,
            DISPATCH_BLOCK_ASSIGN_CURRENT = 4L,
            DISPATCH_BLOCK_NO_QOS_CLASS = 8L,
            DISPATCH_BLOCK_INHERIT_QOS_CLASS = 16L,
            DISPATCH_BLOCK_ENFORCE_QOS_CLASS = 32L
        }

        // Enum @ acl.h:69:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/acl.h)
        public enum acl_perm_t : int
        {
            ACL_READ_DATA = 2,
            ACL_LIST_DIRECTORY = 2,
            ACL_WRITE_DATA = 4,
            ACL_ADD_FILE = 4,
            ACL_EXECUTE = 8,
            ACL_SEARCH = 8,
            ACL_DELETE = 16,
            ACL_APPEND_DATA = 32,
            ACL_ADD_SUBDIRECTORY = 32,
            ACL_DELETE_CHILD = 64,
            ACL_READ_ATTRIBUTES = 128,
            ACL_WRITE_ATTRIBUTES = 256,
            ACL_READ_EXTATTRIBUTES = 512,
            ACL_WRITE_EXTATTRIBUTES = 1024,
            ACL_READ_SECURITY = 2048,
            ACL_WRITE_SECURITY = 4096,
            ACL_CHANGE_OWNER = 8192,
            ACL_SYNCHRONIZE = 1048576
        }

        // Enum @ acl.h:91:9 (/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/sys/acl.h)
        public enum acl_tag_t : int
        {
            ACL_UNDEFINED_TAG = 0,
            ACL_EXTENDED_ALLOW = 1,
            ACL_EXTENDED_DENY = 2
        }

        // MacroObject @ CGWindow.h:42:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        public static CGWindowID kCGNullWindowID = 0;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberDoubleType = 13;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberLongLongType = 11;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberFloat32Type = 5;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberIntType = 9;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberSInt16Type = 2;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberCFIndexType = 14;

        // EnumConstant @ CGWindow.h:137:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CGWindow.h)
        public const uint kCGWindowListOptionAll = 0;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberCharType = 7;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberSInt64Type = 4;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberLongType = 10;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberFloat64Type = 6;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberSInt8Type = 1;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberShortType = 8;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberCGFloatType = 16;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberFloatType = 12;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberSInt32Type = 3;

        // EnumConstant @ CFNumber.h:31:9 (Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFNumber.h)
        public const uint kCFNumberNSIntegerType = 15;

        #endregion

        #region Runtime

        public static class Runtime
        {

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = CStrings.CString(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CString value)
                {
                    return CStrings.String(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromString(string s)
                {
                    return CStrings.CString(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.String(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }
            }

            /// <summary>
            ///     The collection of utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
                private static readonly Dictionary<nint, string> PointersToStrings = new();
                private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
                private static readonly Dictionary<nint, string> PointersToStringsWide = new();

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string String(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStrings.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStrings[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointers.Add(hash, value);
                    PointersToStrings.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string StringWide(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStringsWide[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringUni(pointer2._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointersWide.Add(hash, value);
                    PointersToStringsWide.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString CString(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointers.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    StringHashesToPointers.Add(hash, new CString(pointer));
                    PointersToStrings.Add(pointer, str);

                    return new CString(pointer);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide CStringWide(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalUni(str);
                    StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
                    PointersToStringsWide.Add(pointer, str);

                    return new CStringWide(pointer);
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
                ///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
                ///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
                /// </summary>
                public static void FreeAllStrings()
                {
                    foreach (var (ptr, _) in PointersToStrings)
                    {
                        Marshal.FreeHGlobal(ptr);
                    }

                    // We can not guarantee that the application has not a strong reference the string since it was allocated,
                    //  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
                    //  on the responsibility of the application developer. The best we can do is just remove any and all strong
                    //  references we have here to the strings.

                    StringHashesToPointers.Clear();
                    PointersToStrings.Clear();
                }

                /// <summary>
                ///     Frees the memory for specific previously allocated C strings and releases associated references to
                ///     <see cref="string" /> objects which happened during <see cref="String" /> or
                ///     <see cref="CString" />. Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="pointers">The C string pointers.</param>
                /// <param name="count">The number of C string pointers.</param>
                public static void FreeCStrings(CString* pointers, int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        var ptr = pointers[i];
                        FreeCString(ptr);
                    }

                    Marshal.FreeHGlobal((IntPtr)pointers);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCString(CString value)
                {
                    if (!PointersToStrings.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointers.Remove(hash);
                    PointersToStrings.Remove(value._pointer);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCStringWide(CStringWide value)
                {
                    if (!PointersToStringsWide.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointersWide.Remove(hash);
                    PointersToStringsWide.Remove(value._pointer);
                }

                // djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
                //  References:
                //  (1) https://stackoverflow.com/a/7666577/2171957
                //  (2) http://www.cse.yorku.ca/~oz/hash.html
                //  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
                private static uint Djb2(byte* str)
                {
                    uint hash = 5381;

                    unchecked
                    {
                        uint c;
                        while ((c = *str++) != 0)
                        {
                            hash = (hash << 5) + hash + c; // hash * 33 + c
                        }
                    }

                    return hash;
                }

                private static uint Djb2(string str)
                {
                    uint hash = 5381;

                    // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
                    foreach (var c in str)
                    {
                        hash = (hash << 5) + hash + c; // hash * 33 + c
                    }

                    return hash;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = CStrings.CStringWide(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CStringWide value)
                {
                    return CStrings.StringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromString(string s)
                {
                    return CStrings.CStringWide(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.StringWide(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}